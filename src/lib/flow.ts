/* ------------------------------------------------------------------ */
/* 1.  Chat-node definition  (unchanged ‚Äì keeps all the existing UI   */
/*     fields so renderNode.ts keeps working)                         */
/* ------------------------------------------------------------------ */
import * as prompts from "./prompts";
import { INTENTS, Intent } from "@/lib/intent";
import { FACTS_TOTAL } from "./funFacts";   // ‚Üê –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É –Ω–∞–≤–µ—Ä—Ö—É

export interface ChatNode {
  id: string;
  template: string | string[];
  tag?: string;
  buttons?: string[];
  info?: { title?: string; body?: string[]; link?: string, img?: string };
  event?: { img: string; checkIn: string; checkOut: string, ceremony: string, address: string, mapLink: string, overnight: Boolean };
  auto?: boolean;          // kept for backward-compat but no longer used
  delayMs?: number;
  inquiry?: boolean;
  allowedIntents?: Intent[],
  concierge?: { img: string };
  useGPT?: boolean;
  video?: { id: string, caption: string }
}



/* the original linear map of leaves ‚Äì **unchanged** ---------------- */
export const flow: Record<string, ChatNode> = {
  /* ‚Ä¶‚Ääall your existing nodes verbatim‚Ä¶ */
  greeting: {
    id: "greeting",
    tag: "greeting",
    concierge: { img: "/img/bride-groom.png", },
    template: "{intro}",
    useGPT: false,
    buttons: ["–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!"],
  },
  concierge_intro: {
    id: "concierge_intro",
    tag: "concierge_intro",
    concierge: { img: "/img/peep-17.svg", },                   // <-- –Ω–æ–≤–æ–µ –ø–æ–ª–µ
    template: prompts.greeting,
    buttons: ["–ü–æ–µ—Ö–∞–ª–∏"],
    useGPT: true
  },
  greeting_repeat: {
    id: "greeting_repeat",
    tag: "greeting_repeat",
    concierge: { img: "/img/peep-17.svg", },                   // <-- –Ω–æ–≤–æ–µ –ø–æ–ª–µ
    template: prompts.greeting_repeat,
    buttons: ["–ü–æ–µ—Ö–∞–ª–∏"],
    useGPT: true
  },
  eventInfo: {
    id: "eventInfo",
    template: prompts.eventInfo,
    tag: "eventInfo",
    useGPT: false,
    event: {
      img: "/img/village-01.png",
      checkIn: "22 –∏—é–ª—è (–≤—Ç), 17:00",
      checkOut: "24 –∏—é–ª—è (—á—Ç), 12:00",
      ceremony: "23 –∏—é–ª—è (—Å—Ä), 16:00",
      overnight: true,
      address: "–ú–û, –ü—É—à–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω, ¬´–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫–∏–π¬ª, —É–ª.–í–∞—Ç—É—Ç–∏–Ω–∞ 17",
      mapLink: "https://yandex.eu/maps/-/CHg5MRZF",
    },
    buttons: ["–ü—Ä–æ–¥–æ–ª–∂–∞–π"]
  },
  eventInfo_overnight: {
    id: "eventInfo_overnight",
    template: prompts.eventInfo_overnight,
    tag: "eventInfo",
    useGPT: true,
    event: {
      img: "/img/village-01.png",
      checkIn: "22 –∏—é–ª—è, 16:00",
      checkOut: "24 –∏—é–ª—è, 13:00",
      ceremony: "23 –∏—é–ª—è, 15:00",
      overnight: true,
      address: "–ü—É—à–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω, –ø–æ—Å–µ–ª–æ–∫ –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ —Ç–∏–ø–∞ ¬´–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫–∏–π¬ª, —É–ª.–í–∞—Ç—É—Ç–∏–Ω–∞ 17",
      mapLink: "https://yandex.eu/maps/-/CHg5MRZF",
    },
    buttons: ["–ü—Ä–æ–¥–æ–ª–∂–∞–π"]
  },
  eventInfo_ceremony: {
    id: "eventInfo_ceremony",
    template: prompts.eventInfo_ceremony,
    tag: "eventInfo",
    useGPT: true,
    event: {
      img: "/img/village-01.png",
      checkIn: "22 –∏—é–ª—è, 16:00",
      checkOut: "24 –∏—é–ª—è, 13:00",
      ceremony: "23 –∏—é–ª—è, 15:00",
      overnight: false,
      address: "–ü—É—à–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω, –ø–æ—Å–µ–ª–æ–∫ –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ —Ç–∏–ø–∞ ¬´–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫–∏–π¬ª, —É–ª.–í–∞—Ç—É—Ç–∏–Ω–∞ 17",
      mapLink: "https://yandex.eu/maps/-/CHg5MRZF",
    },
    buttons: ["–ü—Ä–æ–¥–æ–ª–∂–∞–π"]
  },
  rsvp_ask: {
    id: "rsvp_ask",
    template: prompts.rsvp_ask,
    concierge: { img: "/img/peep-18.svg", },
    tag: "rsvp_ask",
    useGPT: true,
    buttons: ["üå≥ –û–±–∞ –¥–Ω—è", "ü•Ç –¢–æ–ª—å–∫–æ –Ω–∞ —Ü–µ—Ä–µ–º–æ–Ω–∏—é", "‚ùå –ù–µ—Ç (–ª—É—á—à–µ –Ω–µ –Ω–∞–∂–∏–º–∞—Ç—å!)"]
  },
  rsvp_yes: {
    id: "rsvp_yes",
    tag: "rsvp_yes",
    template: prompts.rsvp_yes,
    useGPT: true,
    buttons: ["üëâ –ï–¥–µ–º –¥–∞–ª—å—à–µ!"]
  },
  rsvp_yes_only_ceremony: {
    id: "rsvp_yes_only_ceremony",
    tag: "rsvp_yes",
    template: prompts.rsvp_yes_only_ceremony,
    useGPT: true,
    buttons: ["üëâ –ï–¥–µ–º –¥–∞–ª—å—à–µ!"]
  },
  rsvp_no: {
    id: "rsvp_no",
    tag: "rsvp_no",
    template: prompts.rsvp_no,
    useGPT: true,
    buttons: ["üå≥ –û–±–∞ –¥–Ω—è", "ü•Ç –¢–æ–ª—å–∫–æ –Ω–∞ —Ü–µ—Ä–µ–º–æ–Ω–∏—é"]
  },
  rsvp_other: {
    id: "rsvp_other",
    tag: "rsvp_other",
    template: prompts.rsvp_other,
    useGPT: true,
    buttons: ["üå≥ –û–±–∞ –¥–Ω—è", "ü•Ç –¢–æ–ª—å–∫–æ –Ω–∞ —Ü–µ—Ä–µ–º–æ–Ω–∏—é"]
  },
  diet_ask: {
    id: "diet_ask",
    template: prompts.diet_ask,
    tag: "diet_ask",
    concierge: { img: "/img/peep-21.svg", },
    useGPT: true,
    inquiry: true,
    allowedIntents: [INTENTS.dietary_choice],
    buttons: ["–ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–π"]
  },
  diet_ok: {
    id: "diet_ok",
    tag: "diet_ok",
    template: prompts.diet_ok,
    useGPT: true,
    buttons: ["üëâ –û—Ç–ª–∏—á–Ω–æ, –µ–¥–µ–º –¥–∞–ª—å—à–µ!"]
  },
  diet_other: {
    id: "diet_other",
    tag: "diet_other",
    template: prompts.diet_other,
    useGPT: true,
    buttons: ["ü•© –ú—è—Å–æ", "üêü –†—ã–±–∞"]
  },
  dress_code: {
    id: "dress_code",
    template: prompts.dress_code,
    tag: "dress_code",
    useGPT: false,
    info: {
      img: "/img/dress-code.png",
      title: "–ë–µ–∑ –ø–µ—Å—Ç—Ä–æ–≥–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!",
      body: [
        "**–¶–≤–µ—Ç–∞:** —Å–ø–æ–∫–æ–π–Ω—ã–µ, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –∏–ª–∏ –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏.",
        "**–ò–∑–±–µ–≥–∞–µ–º** —è—Ä–∫–∏—Ö –ø—Ä–∏–Ω—Ç–æ–≤, –∫—Ä—É–ø–Ω—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤, –¥–∂–∏–Ω—Å–æ–≤ –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∫—Ä–æ—Å—Å–æ–≤–æ–∫.",
        "**–ú—É–∂—á–∏–Ω–∞–º** ‚Äî –∫–æ—Å—Ç—é–º –∏–ª–∏ —Ä—É–±–∞—à–∫–∞ + –±—Ä—é–∫–∏.",
        "**–ñ–µ–Ω—â–∏–Ω–∞–º** ‚Äî –ø–ª–∞—Ç—å–µ –º–∏–¥–∏/–∫–æ–º–±–∏–Ω–µ–∑–æ–Ω."
      ]
    },
    buttons: ["–ü—Ä–æ–¥–æ–ª–∂–∞–π"]
  },
  gifts: {
    id: "gifts",
    template: prompts.gifts,
    useGPT: true,
    tag: 'gifts',
    info: {
      img: "/img/bank-details.png",
      title: "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞",
      body: [
        "–ï—Å–ª–∏ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –û–ª—é –∏ –°–∞—à—É –ø–µ—Ä–µ–≤–æ–¥–æ–º ‚Äî –≤–æ—Ç –∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:",
        "üè¶ –¢-–ë–∞–Ω–∫ ‚Äì **+7 963 643 16 82** (–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –®.)"
      ]
    },
    buttons: ["üëç –ü–æ–Ω—è—Ç–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º"]
  },
  alcohol: {
    id: "alcohol",
    tag: "alcohol",
    template: prompts.alcohol,
    info: {
      img: "/img/alcohol.png",
    },
    useGPT: true,
    buttons: ["üëå –ü—Ä–∏–Ω—è—Ç–æ, –ö—É–∑—è!"]
  },
  schedule: {
    id: "schedule",
    tag: "schedule",
    template: prompts.schedule,
    useGPT: false,
    info: {
      img: "/img/schedule-02.png",
      title: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è ‚Äî 23 –∏—é–ª—è",
      body: [
        "**15:00** ‚Äî –°–±–æ—Ä –≥–æ—Å—Ç–µ–π, welcome drinks",
        "**16:00** ‚Äî –¶–µ—Ä–µ–º–æ–Ω–∏—è",
        "**16:30** ‚Äî –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è",
        "**17:00** ‚Äî –£–∂–∏–Ω –∏ –æ–±—â–µ–Ω–∏–µ",
        "**19:00** ‚Äî –ü–µ—Ä–≤—ã–π —Ç–∞–Ω–µ—Ü –∏ —Ç–æ—Ä—Ç",
        "**20:00** ‚Äî –°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è, —Ç–∞–Ω—Ü—ã, –∫–∞—Ä–∞–æ–∫–µ",
        "**21:00** ‚Äî –û–∫–æ–Ω—á–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
      ]
    },
    buttons: ["üëå –ü–æ–Ω—è—Ç–Ω–æ, –µ–¥–µ–º –¥–∞–ª—å—à–µ!"]
  },
  wish: {
    id: "wish",
    tag: "wish",
    template: prompts.wish,
    useGPT: true,
    inquiry: true
  },
  wish_response: {
    id: "wish_response",
    tag: "wish_response",
    template: prompts.wish_response,
    useGPT: true,
    buttons: ["‚ú® –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"]
  },
  contacts: {
    id: "contacts",
    template: prompts.contacts,
    tag: "contacts",
    useGPT: true,
    buttons: ["‚ú® –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"],
    info: {
      img: "/img/contacts.png",
      title: "–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞",
      body: [
        "üìç –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: **–ê–Ω–Ω–∞**",
        "üì± Telegram / WhatsApp: **+7 (963) 508-42-00**",
        "‚è∞ –ù–∞ —Å–≤—è–∑–∏: –¥–æ –∏ –≤–æ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        "üÜò –õ—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–º–æ—â—å"
      ]
    },
  },
  video_bonus: {
    id: "video_bonus",
    tag: "video_bonus",
    template: "–ê –≤–æ—Ç –∏ –æ–±–µ—â–∞–Ω–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑... –°–µ—Ä—å–µ–∑–Ω–æ –¥—É–º–∞–ª–∏, —á—Ç–æ –ø–æ–∫–∞–∂—É –≤–∞–º –æ–±—Ä–∞–∑—ã –º–æ–ª–æ–¥–æ–∂–µ–Ω–æ–≤?",
    useGPT: false,
    info: {
      img: "/img/rospis.png",

    },
    // video: {
    //   id: "bg8-z9cNk4s",
    //   caption: "–ö–æ—Ä–æ—Ç–∫–∏–π —Ä–æ–ª–∏–∫ —Å –º–µ—Å—Ç–∞ —Ä–æ—Å–ø–∏—Å–∏ üåø",
    // },
    buttons: ["‚ú® –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"]
  },
  flowers: {
    id: "flowers",
    tag: "flowers",
    template: prompts.flowers,
    useGPT: true,
    info: {
      img: "/img/flowers.png",
    },
    // video: {
    //   id: "bg8-z9cNk4s",
    //   caption: "–ö–æ—Ä–æ—Ç–∫–∏–π —Ä–æ–ª–∏–∫ —Å –º–µ—Å—Ç–∞ —Ä–æ—Å–ø–∏—Å–∏ üåø",
    // },
    buttons: ["üëå –ü–æ–Ω—è—Ç–Ω–æ"]
  },
  hints: {
    id: "hints",
    tag: "hints",
    template: prompts.hints,
    useGPT: false,
    info: {
      img: "/img/hints.png",
      title: "–ß—Ç–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π",
      body: [
        "ü•ø –°–º–µ–Ω–Ω–∞—è —É–¥–æ–±–Ω–∞—è –æ–±—É–≤—å",
        "ü©¥ –¢–∞–ø–æ—á–∫–∏ + –∫—É–ø–∞–ª—å–Ω–∏–∫/–ø–ª–∞–≤–∫–∏",
        "ü¶ü –°—Ä–µ–¥—Å—Ç–≤–æ –æ—Ç –∫–æ–º–∞—Ä–æ–≤",
        "ü™• –ú–∏–Ω–∏-–Ω–∞–±–æ—Ä –≥–∏–≥–∏–µ–Ω—ã",
        "üï∂ –°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏ –∏ –ª—ë–≥–∫–∞—è –ø–∞–Ω–∞–º–∞/—à–ª—è–ø–∞",
        "üëï –õ—ë–≥–∫–∞—è –∫–æ—Ñ—Ç–∞ –∏–ª–∏ –ø–ª–µ–¥",
        "üß¥ –ö—Ä–µ–º SPF 30+",
        "üíä –õ–∏—á–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞",
      ]
    },
    // video: {
    //   id: "bg8-z9cNk4s",
    //   caption: "–ö–æ—Ä–æ—Ç–∫–∏–π —Ä–æ–ª–∏–∫ —Å –º–µ—Å—Ç–∞ —Ä–æ—Å–ø–∏—Å–∏ üåø",
    // },
    buttons: ["üëå –ü–æ–Ω—è—Ç–Ω–æ"]
  },
  fun_fact: {
    id: "fun_fact",
    tag: "fun_fact",
    template: prompts.fun_fact,
    useGPT: true,
  },
  fun_fact_random: {
    id: "fun_fact_random",
    template: "{dynamic}",
    tag: "fun_fact_random",
    useGPT: false,
    buttons: ["–ï—â—ë —Ñ–∞–∫—Ç", "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"],
  },
  fun_fact_first: {
    id: "fun_fact_first",
    template: "{dynamic}",
    tag: "fun_fact_first",
    useGPT: false,
    buttons: ["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"],
  },
  fun_fact_empty: {
    id: "fun_fact_empty",
    tag: "fun_fact_empty",
    template: "–ü–æ—Ö–æ–∂–µ, –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã! üéâ",
    useGPT: false,
    buttons: ["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"],
  },
  idle_menu: {
    id: "idle_menu",
    tag: "idle_menu",
    template: prompts.idle,
    useGPT: false,
    buttons: ["–ü–æ–¥–∞—Ä–∫–∏", "–ü–æ–∂–µ–ª–∞–Ω–∏–µ", "–ó–∞–±–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç"],
  },
  unknown: {
    id: "unknown",
    tag: "unknown",
    template: prompts.unknown,
    useGPT: false,
    buttons: ["–ü–æ–¥–∞—Ä–∫–∏", "–ü–æ–∂–µ–ª–∞–Ω–∏–µ", "–î—Ä–µ—Å—Å-–∫–æ–¥"],
  },
  transfer: {
    id: "transfer",
    tag: "transfer",
    template: prompts.transfer,
    useGPT: false,
    info: {
      img: "/img/route.png",
      title: "–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ Lifehack Village",
      body: [
        "üìç –ê–¥—Ä–µ—Å: –ü—É—à–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω, **–ø–≥—Ç –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫–∏–π, —É–ª. –í–∞—Ç—É—Ç–∏–Ω–∞ 17**",
        "üöó –ù–∞ –∞–≤—Ç–æ: –Ø—Ä–æ—Å–ª–∞–≤—Å–∫–æ–µ —à–æ—Å—Å–µ (–ú-8) ‚Üí **–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫–∏–π (‚âà1 —á –æ—Ç –ú–æ—Å–∫–≤—ã)**",
        "üöï –¢–∞–∫—Å–∏/–∫–∞—Ä—à–µ—Ä: –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∞–¥—Ä–µ—Å **¬´–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫–∏–π, –í–∞—Ç—É—Ç–∏–Ω–∞ 17¬ª**",
        "üì≤ –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É **–ê–Ω–Ω–µ**: **+7 (963) 508-42-00)**"
      ]
    },
    buttons: ["–ü–æ–Ω—è—Ç–Ω–æ"],
  },
};

/* ------------------------------------------------------------------ */
/* 2.  Behaviour-tree primitives                                      */
/* ------------------------------------------------------------------ */
export type Condition = (ctx: any) => boolean | Promise<boolean>;
export type Action = (ctx: any, lastInput: string) => void | Promise<void>;

export type BTNode =
  | {
    id: string; type: "leaf";
    conditions?: Condition[];
    onEnter?: Action[];
    onExit?: Action[];
  }

  | {
    id: string; type: "sequence" | "selector";
    children: BTNode[];
    conditions?: Condition[];
    onEnter?: Action[];
    onExit?: Action[];
  };

/* handy helpers you may reuse when writing new branches ------------- */
export const once = (tag: string): Condition => (ctx) =>
  !(ctx.seen?.includes?.(tag));

export const isIntroNotComplete = (): Condition => (ctx) => {
  return !Boolean(ctx.story_complete);
}

export const isStayingOvernight = (tag: string): Condition => (ctx) =>
  Boolean(ctx.stays);

export const isNotStayingOvernight = (tag: string): Condition => (ctx) =>
  !Boolean(ctx.stays);

export const slotFilled = (slot: string): Condition => (ctx) => {
  //console.log('slotFilled', ctx.id, slot, ctx[slot], Boolean(ctx[slot]))
  return Boolean(ctx[slot]);
}

export const slotNotFilled = (slot: string): Condition => (ctx) => {
  //console.log('slotNotFilled', ctx.id, slot, ctx[slot], Boolean(!ctx[slot]))
  return Boolean(!ctx[slot]);
}

export const intent = (
  first: string,
  ...rest: string[]          // –ª—é–±–æ–µ —á–∏—Å–ª–æ –¥–æ–ø. —Ç–µ–≥–æ–≤
): Condition => {
  const tags = [first, ...rest];
  return (ctx) => tags.includes(ctx.intent);
};

export const intentWithLast = (
  first: string,
  ...rest: string[]          // –ª—é–±–æ–µ —á–∏—Å–ª–æ –¥–æ–ø. —Ç–µ–≥–æ–≤
): Condition => {
  const tags = [first, ...rest];
  return (ctx) => (tags.includes(ctx.last_intent) || tags.includes(ctx.intent));
};

export const typing = (ms: number): Action => async () =>
  new Promise((r) => setTimeout(r, ms));

/* example async action that stores the answer to Google Sheets ------- */
import { updateGuest } from "./sheets";
export const saveAnswer = (field: string): Action =>
  async (ctx, lastInput) => {
    if (ctx.lastUserInput && ctx.rowNumber) {
      //console.log('saveAnswer', field, ctx.lastUserInput)
      ctx[field] = ctx.lastUserInput;
      await updateGuest(ctx.rowNumber, field, ctx.lastUserInput);
    }
  };

export const appendAnswer = (field: string): Action =>
  async (ctx, lastInput) => {
    if (!ctx.lastUserInput?.trim() || !ctx.rowNumber) return;

    /* –±–µ—Ä—ë–º —Ç–æ, —á—Ç–æ —É–∂–µ –±—ã–ª–æ –≤ –ø–∞–º—è—Ç–∏ –∏–ª–∏ –≤ Google¬†Sheet */
    const prev = ctx[field] ?? "";
    const next = prev ? `${prev}\n${ctx.lastUserInput.trim()}` : ctx.lastUserInput.trim();

    ctx[field] = next;                              // –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π ctx
    await updateGuest(ctx.rowNumber, field, next);  // –∏ —Å–∞–º—É —è—á–µ–π–∫—É
  };

export const pushSlot = (field: string, value: string): Action =>
  async (ctx, lastInput) => {

    ctx[field] = value;
    console.log('pushSlot', ctx.id, field, value, ctx[field])
  };

/* ------------------------------------------------------------------ */
/* 3.  Declarative behaviour-tree                                     */
/*     (feel free to extend ‚Äì only this object needs editing)         */
/* ------------------------------------------------------------------ */
export const tree: BTNode = {
  id: "root",
  type: "selector",
  children: [
    {
      id: "story",
      type: "sequence",
      conditions: [isIntroNotComplete()],
      children: [
        { id: "greeting", type: "leaf", conditions: [once("greeting")], },
        { id: "concierge_intro", type: "leaf", conditions: [once("concierge_intro")], },
        { id: "eventInfo", type: "leaf", conditions: [once("eventInfo")], },
        // {
        //   id: "eventInfo_selector",
        //   type: "sequence",
        //   children: [
        //     {
        //       id: "eventInfo_overnight",
        //       type: "leaf",
        //       conditions: [isStayingOvernight("eventInfo_overnight"), once("eventInfo")]
        //     },
        //     {
        //       id: "eventInfo_ceremony",
        //       type: "leaf",
        //       conditions: [isNotStayingOvernight("eventInfo_ceremony"), once("eventInfo")]
        //     }
        //   ],
        // },
        {
          id: "main",
          type: "sequence",
          children: [
            {
              id: "rsvp_block",
              type: "sequence",
              conditions: [slotNotFilled("rsvp")],
              children: [
                { id: "rsvp_ask", type: "leaf", conditions: [once("rsvp_ask")] },
                {
                  id: "rsvp_selector",
                  type: "selector",
                  children: [
                    {
                      id: "rsvp_yes",
                      type: "leaf",
                      conditions: [intent(INTENTS.both_days)],
                      onEnter: [saveAnswer('rsvp_ask'), pushSlot('rsvp', 'complete')]
                    },
                    {
                      id: "rsvp_yes_only_ceremony",
                      type: "leaf",
                      conditions: [intent(INTENTS.only_ceremony)],
                      onEnter: [saveAnswer('rsvp_ask'), pushSlot('rsvp', 'complete')]
                    },
                    {
                      id: "rsvp_no",
                      type: "leaf",
                      conditions: [intent(INTENTS.no)],
                    },
                    {
                      id: "rsvp_other",
                      type: "leaf",
                      onExit: [],
                    },
                  ],
                }
              ]
            },
            {
              id: "diet_selector",
              type: "selector",
              conditions: [slotNotFilled("diet")],
              children: [
                {
                  id: "diet_ask",
                  type: "leaf",
                  conditions: [once("diet_ask")],
                },
                {
                  id: "diet_ok",
                  type: "leaf",
                  onEnter: [saveAnswer("diet_ask"), pushSlot('diet', 'complete')]
                },
              ],
            },
            {
              id: "dress_code",
              type: "leaf",
              conditions: [once("dress_code")],
            },
            {
              id: "gifts",
              type: "leaf",
              conditions: [once("gifts")],
            },
            {
              id: "flowers",
              type: "leaf",
              conditions: [once("flowers")],
            },
            {
              id: "alcohol",
              type: "leaf",
              conditions: [once("alcohol")],
            },
            
            {
              id: "schedule",
              type: "leaf",
              conditions: [once("schedule")],
            },
            {
              id: "wish_sequence",
              type: "sequence",
              children: [
                {
                  id: "wish",
                  type: "leaf",
                  conditions: [once("wish")]
                },
                {
                  id: "wish_response",
                  type: "leaf",
                  onEnter: [appendAnswer("wish")],
                  conditions: [once("wish_response")]
                },
              ]
            },
            {
              id: "contacts",
              type: "leaf",
              conditions: [once("contacts")]
            },
            {
              id: "video_bonus",
              type: "leaf",
              conditions: [once("video_bonus")]
            },
            {
              id: "fun_fact_selector",
              type: "selector",
              children: [
                {
                  id: "fun_fact_sequence",
                  type: "sequence",
                  conditions: [
                    /* —Ñ–∞–∫—Ç—ã –µ—â—ë –µ—Å—Ç—å */
                    (ctx) => (ctx.funFactsUsed?.length ?? 0) < FACTS_TOTAL
                  ],
                  children: [
                    {
                      id: "fun_fact",
                      type: "leaf",
                      conditions: [once("fun_fact")]
                    },
                    {
                      id: "fun_fact_first",
                      type: "leaf",
                    }
                  ]
                },
                { id: "fun_fact_empty", type: "leaf" }
              ]
            },
            {
              id: "hints",
              type: "leaf",
              conditions: [once("hints")],
              onEnter: [saveAnswer("story_complete")],
            },
          ],
        },
      ]
    },
    {
      id: "freeform",
      type: "sequence",
      conditions: [slotFilled('story_complete')],
      children: [
        {
          id: "greeting_repeat",
          type: "leaf",
          conditions: [once("greeting"), once("greeting_repeat")]
        },
        {
          id: "idle_menu",
          type: "leaf",
          conditions: [once("idle_menu")]
        },
        {
          id: "menu_selector",
          type: "selector",
          children: [
            {
              id: "eventInfo",
              type: "leaf",
              conditions: [intent(INTENTS.venue, INTENTS.time)]
            },
            {
              id: "schedule",
              type: "leaf",
              conditions: [intent(INTENTS.schedule)]
            },
            {
              id: "dress_code",
              type: "leaf",
              conditions: [intent(INTENTS.dresscode)],
            },
            {
              id: "flowers",
              type: "leaf",
              conditions: [intent(INTENTS.flowers)],
            },
            {
              id: "idle_menu",
              type: "leaf",
              conditions: [intent(INTENTS.continue, INTENTS.yes, INTENTS.no)],
            },
            {
              id: "video_bonus",
              type: "leaf",
              conditions: [intent(INTENTS.video)],
            },
            {
              id: "gifts",
              type: "leaf",
              conditions: [intent(INTENTS.gifts)],
            },
            {
              id: "alcohol",
              type: "leaf",
              conditions: [intent(INTENTS.alcohol)],
            },
            {
              id: "hints",
              type: "leaf",
              conditions: [intent(INTENTS.tips)],
            },
            // {
            //   id: "diet_selector",
            //   type: "sequence",
            //   conditions: [intent(INTENTS.dietary_choice)],
            //   children: [
            //     {
            //       id: "diet_ask",
            //       type: "leaf"
            //     },
            //     {
            //       id: "diet_ok",
            //       type: "leaf",
            //       onEnter: [saveAnswer("diet_ask")]
            //     },
            //   ],
            // },
            {
              id: "contacts",
              type: "leaf",
              conditions: [intent(INTENTS.contacts)],
            },
            {
              id: "transfer",
              type: "leaf",
              conditions: [intent(INTENTS.route)],
            },
            {
              id: "wish_sequence",
              type: "sequence",
              conditions: [intentWithLast(INTENTS.wish)],
              children: [
                {
                  id: "wish",
                  type: "leaf"
                },
                {
                  id: "wish_response",
                  type: "leaf",
                  onEnter: [appendAnswer("wish")]
                },
              ]
            },
            {
              id: "fun_fact_selector",
              type: "selector",
              conditions: [intent(INTENTS.fun_fact)],
              children: [
                {
                  id: "fun_fact_sequence",
                  type: "sequence",
                  conditions: [
                    /* —Ñ–∞–∫—Ç—ã –µ—â—ë –µ—Å—Ç—å */
                    (ctx) => (ctx.funFactsUsed?.length ?? 0) < FACTS_TOTAL
                  ],
                  children: [
                    {
                      id: "fun_fact",
                      type: "leaf",
                      conditions: [once("fun_fact")]
                    },
                    {
                      id: "fun_fact_random",
                      type: "leaf",
                    }
                  ]
                },
                { id: "fun_fact_empty", type: "leaf" }
              ]
            },
            {
              id: "unknown",
              type: "leaf",
              conditions: [],
            },
          ]
        }
      ]
    }
  ],
};
